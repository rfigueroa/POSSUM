plugins {
    id 'java'
    id 'maven-publish'
    id 'idea'
    id 'application'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'de.undercouch.download' version '5.5.0'
    id 'jacoco'
    id 'org.barfuin.gradle.jacocolog' version '3.1.0'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

application {
    mainClassName = 'com.target.devicemanager.DeviceMain'
}

group 'com.target'
version '1.0'

sourceCompatibility = '17'

repositories {
    mavenCentral()
}


ext['snakeyaml.version'] = '2.0'
dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "io.micrometer:micrometer-registry-influx"
    implementation "org.javapos:javapos-config-loader:2.2.0"
    implementation "org.javapos:javapos:1.14.3"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0"

    implementation "net.logstash.logback:logstash-logback-encoder:6.4"

    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "com.github.ben-manes.caffeine:caffeine"
    implementation "io.github.classgraph:classgraph:4.8.147"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
}

tasks.withType(JavaExec){
    systemProperties System.properties
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging {
        events "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

jacoco {
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

build {
    dependsOn("copyRuntimeJars")
}

task copyRuntimeJars(type: Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/libs"
}


shadowJar{
    archiveClassifier.set("")
}

task generatePom {
    doLast {
        pom {
            project {
                licenses {
                    license {
                        name 'MIT'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                        distribution 'repo'
                        comments 'All source code is under the MIT license.'
                    }
                }
            }
        }.writeTo("$buildDir/pom/$archivesBaseName-$version"+".pom")
    }
}
